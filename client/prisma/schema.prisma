// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now()) @db.Timestamptz()
  updatedAt    DateTime @default(now()) @updatedAt @db.Timestamptz()
}

model User {
  id               String          @id @default(uuid())
  username         String          @unique
  email            String          @unique
  password         String
  createdAt        DateTime        @default(now()) @db.Timestamptz()
  updatedAt        DateTime        @default(now()) @updatedAt @db.Timestamptz()
  profileName      String?
  profilePicture   String?
  profileBanner    String?
  bio              String?
  followedBy       Follow[]        @relation("UserFollowers")
  following        Follow[]        @relation("UserFollowing")
  posts            Post[]
  comments         Comment[]
  postLikes        PostLike[]
  commentLikes     CommentLike[]
  Session          Session[]
  accounts         Account[]
  linkedAccounts   LinkedAccount[] @relation("UserLinkedAccounts")
  linkedToAccounts LinkedAccount[] @relation("LinkedToAccounts")
  postShares       PostShare[]
  commentShares    CommentShare[]
  Bookmark         Bookmark[]

  receivedNotifications  NotificationHistory[]         @relation("UserNotifications")
  triggeredNotifications NotificationHistory[]         @relation("NotificationsTriggered")
  notificationSettings   ProfileNotificationSettings[] @relation("UserNotificationSettings")
  targetProfileSettings  ProfileNotificationSettings[] @relation("TargetProfileSettings")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now()) @db.Timestamptz()
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamptz()

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Post {
  id        String         @id @default(uuid())
  user      User           @relation(fields: [userId], references: [id])
  userId    String
  title     String?
  content   String
  createdAt DateTime       @default(now()) @db.Timestamptz()
  updatedAt DateTime       @default(now()) @updatedAt @db.Timestamptz()
  comments  Comment[]
  likes     PostLike[]
  revisions PostRevision[]
  shares    PostShare[]

  quoteCount Int          @default(0)
  quotedIn   QuotedPost[] @relation("QuotedInPosts")
  quotes     QuotedPost[] @relation("QuotingPosts")
  Bookmark   Bookmark[]
}

model Comment {
  id        String         @id @default(uuid())
  post      Post           @relation(fields: [postId], references: [id])
  postId    String
  parentId  String?
  user      User           @relation(fields: [userId], references: [id])
  userId    String
  title     String?
  content   String
  createdAt DateTime       @default(now()) @db.Timestamptz()
  updatedAt DateTime       @default(now()) @updatedAt @db.Timestamptz()
  parent    Comment?       @relation("CommentReplies", fields: [parentId], references: [id])
  replies   Comment[]      @relation("CommentReplies")
  likes     CommentLike[]
  shares    CommentShare[]
  Bookmark  Bookmark[]
}

model PostShare {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  createdAt DateTime @default(now()) @db.Timestamptz()
}

model CommentShare {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  comment   Comment  @relation(fields: [commentId], references: [id])
  commentId String
  createdAt DateTime @default(now()) @db.Timestamptz()
}

model QuotedPost {
  id            String   @id @default(uuid())
  quotedPost    Post     @relation("QuotedInPosts", fields: [quotedPostId], references: [id])
  quotedPostId  String
  quotingPost   Post     @relation("QuotingPosts", fields: [quotingPostId], references: [id])
  quotingPostId String
  createdAt     DateTime @default(now()) @db.Timestamptz()
  updatedAt     DateTime @default(now()) @updatedAt @db.Timestamptz()

  @@unique([quotedPostId, quotingPostId])
}

model PostLike {
  id        String   @id @default(uuid())
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now()) @db.Timestamptz()
}

model CommentLike {
  id        String   @id @default(uuid())
  comment   Comment  @relation(fields: [commentId], references: [id])
  commentId String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now()) @db.Timestamptz()
  postId    String?
}

model PostRevision {
  id        String   @id @default(uuid())
  postId    String
  title     String?
  content   String
  createdAt DateTime @default(now()) @db.Timestamptz()
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Follow {
  follower   User   @relation("UserFollowing", fields: [followerId], references: [id])
  followerId String

  followedUser   User   @relation("UserFollowers", fields: [followedUserId], references: [id])
  followedUserId String

  createdAt DateTime @default(now()) @db.Timestamptz()

  @@id([followerId, followedUserId])
}

model LinkedAccount {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @db.Timestamptz()
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamptz()

  userId String
  user   User   @relation("UserLinkedAccounts", fields: [userId], references: [id])

  linkedUserId String
  linkedUser   User   @relation("LinkedToAccounts", fields: [linkedUserId], references: [id])

  @@unique([userId, linkedUserId])
}

model Bookmark {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @db.Timestamptz()
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamptz()

  user   User   @relation(fields: [userId], references: [id])
  userId String

  post   Post?   @relation(fields: [postId], references: [id])
  postId String?

  comment   Comment? @relation(fields: [commentId], references: [id])
  commentId String?

  @@unique([userId, postId, commentId])
  @@index([userId])
  @@index([postId])
  @@index([commentId])
}

enum NotificationTypes {
  NEW_POST
  REPLY
}

enum NotificationSettingType {
  ALL
  SPECIFIC
  DISABLE
}

model NotificationHistory {
  id               String            @id @default(uuid())
  userId           String
  user             User              @relation("UserNotifications", fields: [userId], references: [id], onDelete: Cascade)
  fromUserId       String
  fromUser         User              @relation("NotificationsTriggered", fields: [fromUserId], references: [id], onDelete: Cascade)
  notificationType NotificationTypes
  content          String            @db.Text
  isRead           Boolean           @default(false)
  createdAt        DateTime          @default(now()) @db.Timestamptz()
  viewedAt         DateTime?         @db.Timestamptz()
  metaData         Json?

  @@index([userId, createdAt(sort: Desc)])
  @@index([fromUserId])
  @@map("notification_history")
}

model ProfileNotificationSettings {
  id               String                  @id @default(uuid())
  userId           String
  user             User                    @relation("UserNotificationSettings", fields: [userId], references: [id], onDelete: Cascade)
  targetProfileId  String
  targetProfile    User                    @relation("TargetProfileSettings", fields: [targetProfileId], references: [id], onDelete: Cascade)
  notificationType NotificationSettingType @default(ALL)
  notifyNewPosts   Boolean                 @default(true)
  notifyReplies    Boolean                 @default(true)
  notifyShares     Boolean                 @default(true)
  createdAt        DateTime                @default(now()) @db.Timestamptz()
  updatedAt        DateTime                @updatedAt @db.Timestamptz()

  @@unique([userId, targetProfileId])
  @@index([userId])
  @@map("profile_notification_settings")
}
